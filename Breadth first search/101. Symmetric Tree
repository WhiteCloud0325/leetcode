Given a binary tree, check whether it is a mirror of itself (ie, symmetric around its center).

For example, this binary tree [1,2,2,3,4,4,3] is symmetric:

    1
   / \
  2   2
 / \ / \
3  4 4  3
But the following [1,2,2,null,3,null,3] is not:
    1
   / \
  2   2
   \   \
   3    3
Note:
Bonus points if you could solve it both recursively and iteratively.



/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
public:
    bool isSymmetric(TreeNode* root) {
        if(root==NULL) return true;
        return BreadthSearch(root->left,root->right);
    }
    bool BreadthSearch(TreeNode* Node1,TreeNode* Node2){
        if(Node1==NULL && Node2==NULL) return true;
        else if((Node1==NULL && Node2!=NULL) || (Node1!=NULL && Node2==NULL)) return false;
        else{
            if(Node1->val!=Node2->val) return false;
            else{
                return BreadthSearch(Node1->left,Node2->right)&& BreadthSearch(Node1->right,Node2->left);
            }
        }
    }
    
};
使用广度优先搜索
