Related Topics: Array, Bianry Search, Divid and Conquer
Difficulty: Hard


Question:
There are two sorted arrays nums1 and nums2 of size m and n respectively.

Find the median of the two sorted arrays. The overall run time complexity should be O(log (m+n)).

Example 1:
nums1 = [1, 3]
nums2 = [2]

The median is 2.0
Example 2:
nums1 = [1, 2]
nums2 = [3, 4]

The median is (2 + 3)/2 = 2.5

这道题的本质是找到两个排序数组中第K大的数，思想是分治法，每个数组的前k/2个数，小的则k/2都在前k个数中
Answer:
class Solution {
public:
     int getkth(vector<int>&A,int Astart,vector<int>&B,int Bstart,int k){
        if(Astart>(int)(A.size()-1)) return B[Bstart+k-1];
        if(Bstart>(int)(B.size()-1)) return A[Astart+k-1];    
        if(k==1) return min(A[Astart],B[Bstart]);
        int ak=INT_MAX,bk=INT_MAX;
	    if (Astart + k/2 - 1 < A.size()) ak = A[Astart + k/2 - 1]; 
	    if (Bstart + k/2 - 1 < B.size()) bk = B[Bstart + k/2 - 1];        
	
	    if (ak < bk) 
	        return getkth(A, Astart + k/2, B, Bstart,       k - k/2);// Check: aRight + bLeft 
	    else 
	        return getkth(A, Astart,       B, Bstart + k/2, k - k/2);// Check: bRight + aLeft
    }
    double findMedianSortedArrays(vector<int>& nums1, vector<int>& nums2) {
        int n1=nums1.size(),n2=nums2.size();
        int lmax=(n1+n2+1)/2;
        int rmin=(n1+n2+2)/2;
        return (getkth(nums1,0,nums2,0,lmax)+getkth(nums1,0,nums2,0,rmin))/2.0;
    }
   
};
