Difficulty: Medium
Related Topics: String, Backtracking

Question:
Given n pairs of parentheses, write a function to generate all combinations of well-formed parentheses.

For example, given n = 3, a solution set is:

[
  "((()))",
  "(()())",
  "(())()",
  "()(())",
  "()()()"
]


Answer:
class Solution {
public:
    string cur;
    vector<string> generateParenthesis(int n) {
        vector<string> res;
        backTracking(res,n,0,0);
        return res;
    }
    void backTracking(vector<string> &res,int n,int num1,int num2){
        if(num1==n&&num2==n){
            res.push_back(cur);
            return;
        }
        if(num1<n){
            cur.push_back('(');
            backTracking(res,n,num1+1,num2);
            cur.pop_back();
        }
         if(num2<n&&num1>num2){
            cur.push_back(')');
            backTracking(res,n,num1,num2+1);
            cur.pop_back();
        }
    }
};

Answer2:
class Solution {
public:
    vector<string> generateParenthesis(int n) {
        vector<string> res;
        paren(n,0,res,"");
        return res;
    }
private:
    void paren(int n, int m, vector<string>& res, string str){
        if(m == 0 && n == 0){
            res.push_back(str);
            return;
        }
        if(n > 0) paren(n-1, m+1, res, str+"(");
        if(m > 0) paren(n, m-1, res, str+")");
    }
};
