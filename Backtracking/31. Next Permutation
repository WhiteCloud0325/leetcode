Related Topics: Array
Difficulty: Medium

Question:
Implement next permutation, which rearranges numbers into the lexicographically next greater permutation of numbers.

If such arrangement is not possible, it must rearrange it as the lowest possible order (ie, sorted in ascending order).

The replacement must be in-place, do not allocate extra memory.

Here are some examples. Inputs are in the left-hand column and its corresponding outputs are in the right-hand column.
1,2,3 → 1,3,2
3,2,1 → 1,2,3
1,1,5 → 1,5,1

Answer:
从i=n-1到 1查找 数比前一位大的数的位置，如果i=0，说明数组从大到小，只要将数组反转就可以了；否则j=n-1到 i找到比
i-1到的第一个数，将此数与i-1交换，这样i到n-1逆序，反转就是下一个排列
class Solution {
public:
    void nextPermutation(vector<int>& nums) {
        int i, j;
        for (i = nums.size() - 1; i>0; i--)
            if (nums[i]>nums[i - 1])
                break;
        if(i==0) {
            reverse(nums,0,nums.size());
        }
        else{
            for(j=nums.size()-1;j>=i;j--){
                if(nums[j]>nums[i-1]){
                    swap(nums[j],nums[i-1]);
                    reverse(nums,i,nums.size());
                    break;
                }
            }
        }
    }
    void reverse(vector<int> &nums,int start,int end){
        int i=start,j=end-1;
        while(i<j){
            swap(nums[i++],nums[j--]);
        }
    }
};
