Related Topicsï¼š Linked List,Divide and Conquer,Heap
Merge k sorted linked lists and return it as one sorted list. Analyze and describe its complexity.


answer:
/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
class Solution {
public:
    ListNode* mergeKLists(vector<ListNode*>& lists) {
        int K=lists.size();
        ListNode* res=divide(lists,K);
        return res;
    }
    ListNode* divide(vector<ListNode*>& lists,int k){
        if(k==0) return NULL;
        if(k==1) return lists[0];
        int end=k/2-1,step=(k-1)/2+1;
        for(int i=0;i<=end;i++){
            lists[i]=mergeTwoLists(lists[i],lists[i+step]);
        }
        return divide(lists,step);
    }
    ListNode* mergeTwoLists(ListNode* l1, ListNode* l2) {
        ListNode *head=new ListNode(0);
        ListNode *run=head;
        while(l1!=NULL &&l2!=NULL){
            if(l1->val<=l2->val){
                run->next=l1;
                l1=l1->next;
                run=run->next;
            }
            else{
                run->next=l2;
                l2=l2->next;
                run=run->next;
            }
        }
        run->next=l1?l1:l2;
        return head->next; 
    }
};

ListNode *mergeKLists(vector<ListNode *> &lists) {
    if(lists.empty()){
        return nullptr;
    }
    while(lists.size() > 1){
        lists.push_back(mergeTwoLists(lists[0], lists[1]));
        lists.erase(lists.begin());
        lists.erase(lists.begin());
    }
    return lists.front();
}
ListNode *mergeTwoLists(ListNode *l1, ListNode *l2) {
    if(l1 == nullptr){
        return l2;
    }
    if(l2 == nullptr){
        return l1;
    }
    if(l1->val <= l2->val){
        l1->next = mergeTwoLists(l1->next, l2);
        return l1;
    }
    else{
        l2->next = mergeTwoLists(l1, l2->next);
        return l2;
    }
}
