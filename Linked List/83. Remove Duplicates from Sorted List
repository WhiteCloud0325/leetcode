Given a sorted linked list, delete all duplicates such that each element appear only once.
For example,
Given 1->1->2, return 1->2.
Given 1->1->2->3->3, return 1->2->3.


方法一 通过hash table来确定是否已经存在重复元素
/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
class Solution {
public:
    ListNode* deleteDuplicates(ListNode* head) {
        if(!head) return head;
        unordered_map<int,bool> mymap;
        ListNode *last=head,*cur=head;
        mymap[head->val]=true;
        cur=last->next;
        while(cur){
            auto it=mymap.find(cur->val);
            if(it!=mymap.end()){
                last->next=cur->next;
                cur=cur->next;
            }
            else{
                mymap[cur->val]=true;
                last=cur;
                cur=cur->next;
            }
        }
        return head;
    }
};


class Solution {
public:
    ListNode* deleteDuplicates(ListNode* head) {
        ListNode *cur=head;
        while(cur){
            if(cur->next&& cur->val==cur->next->val)
                cur->next=cur->next->next;
            else cur=cur->next;
        }
        return head;
    }
};
