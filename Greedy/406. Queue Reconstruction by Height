Suppose you have a random list of people standing in a queue. Each person is described by a pair of integers (h, k), where h is the height of the person and k is the number of people in front of this person who have a height greater than or equal to h. Write an algorithm to reconstruct the queue.

Note:
The number of people is less than 1,100.

Example

Input:
[[7,0], [4,4], [7,1], [5,0], [6,1], [5,2]]

Output:
[[5,0], [7,0], [5,2], [6,1], [4,4], [7,1]]


class Solution {
public:
    vector<pair<int, int>> reconstructQueue(vector<pair<int, int>>& people) {
        vector<pair<int,int>> res;
        int n=people.size();
        if(n==0) return res;
        sort(people.begin(),people.end(),comp);
        int i=1;
        res.push_back(people[0]);
        while(i<n){
            auto it=res.begin();
            res.insert(it+people[i].second,people[i]);
            i++;
        }
        return res;
    }
    static bool comp(pair<int,int> a,pair<int,int> b){
        if(a.first>b.first)
            return true;
        else if(a.first==b.first){
            if(a.second<b.second) return true;
            else return false;
        }
        else return false;
    }
};
