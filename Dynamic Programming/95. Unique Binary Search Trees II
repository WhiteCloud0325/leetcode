Related Topics: Dynamic Programming, Tree


Question:
Given an integer n, generate all structurally unique BST's (binary search trees) that store values 1...n.

For example,
Given n = 3, your program should return all 5 unique BST's shown below.

   1         3     3      2      1
    \       /     /      / \      \
     3     2     1      1   3      2
    /     /       \                 \
   2     1         2                 3



Answer:
The basic idea is that we can construct the result of n node tree just from the result of n-1 node tree.
Here's how we do it: only 2 conditions: 1) The nth node is the new root, so newroot->left = oldroot;

2)the nth node is not root, we traverse the old tree, every time the node in the old tree has a right child, we can perform: 
old node->right = nth node, nth node ->left = right child; and when we reach the end of the tree, don't forget we can also add the nth node here.

One thing to notice is that every time we push a TreeNode in our result, I push the clone version of the root, 
and I recover what I do to the old node immediately. This is because you may use the old tree for several times.

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
public:
     TreeNode* clone(TreeNode* root){
            if(root == nullptr)
                return nullptr;
            TreeNode* newroot = new TreeNode(root->val);
            newroot->left = clone(root->left);
            newroot->right = clone(root->right);
            return newroot;
    }
    
    vector<TreeNode*> generateTrees(int n) {
        if(n==0) return vector<TreeNode*>();
        vector<TreeNode*> res(1,new TreeNode(1));
        for(int i=2;i<=n;i++){
            vector<TreeNode *> tmp;
            for(int j=0;j<res.size();j++){
                TreeNode *root=clone(res[j]);
                TreeNode *cur=new TreeNode(i);
                cur->left=root;
                tmp.push_back(clone(cur));
                cur->left=root->right;
                root->right=cur;
                TreeNode *curFather=root;
                tmp.push_back(clone(root));
                while(cur->left!=NULL){
                    curFather->right=cur->left;
                    cur->left=curFather->right->right;
                    curFather->right->right=cur;
                    curFather=curFather->right;
                    tmp.push_back(clone(root));
                }
                root=NULL;
                cur=NULL;
                curFather=NULL;
                
            }
            res=tmp;
        }
        return res;
    }
};
