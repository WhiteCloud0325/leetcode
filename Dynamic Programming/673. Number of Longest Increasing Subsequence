Difficulty: Medium
Related Topics: Dynamic Programming
iven an unsorted array of integers, find the number of longest increasing subsequence.

Example 1:
Input: [1,3,5,4,7]
Output: 2
Explanation: The two longest increasing subsequence are [1, 3, 4, 7] and [1, 3, 5, 7].
Example 2:
Input: [2,2,2,2,2]
Output: 5
Explanation: The length of longest continuous increasing subsequence is 1, and there are 5 subsequences' length is 1, so output 5.
Note: Length of the given array will be not exceed 2000 and the answer is guaranteed to be fit in 32-bit signed int.

Answer1: dp1[i]计算以nums[i]为最后一个节点的最大长度，dp2[i]是以nums[i]为最后一个节点最大长度子串数目
状态方程：当i时，j从i-1到0
  dp1[i]= max（dp1[i],dp1[j]） if（nums[i]>nums[j]）
  dp2[i]= dp2[j], if(nums[i]>nums[j] && dp1[i]<dp1[j])
          dp2[i]+dp2[j],if(nums[i]>nums[j] && dp1[i]==dp1[j])
          dp2[i], else
class Solution {
public:
    int findNumberOfLIS(vector<int>& nums) {
        if(nums.empty()) return 0;
        int n=nums.size();
        vector<int> dp1(n,1);//计算长度
        vector<int> dp2(n,1);//计算个数
        int res=0,max_length=0;
        for(int i=0;i<n;i++){
            for(int j=i-1;j>=0;j--){
                if(nums[i]>nums[j]){
                    if(dp1[i]>dp1[j]+1) continue;
                    else if(dp1[i]<dp1[j]+1){
                        dp1[i]=dp1[j]+1;
                        dp2[i]=dp2[j];
                    }
                    else dp2[i]+=dp2[j];
                }
            }
            max_length=max(max_length,dp1[i]);
        }
        
        for(int i=0;i<n;i++){
            if(dp1[i] == max_length) res+=dp2[i];
        }
        return res;
    }
};
