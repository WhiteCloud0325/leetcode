Difficulty: Medium
Related Topics: Dynamic Programming

Question:
Given an unsorted array of integers, find the length of longest increasing subsequence.

For example,
Given [10, 9, 2, 5, 3, 7, 101, 18],
The longest increasing subsequence is [2, 3, 7, 101], therefore the length is 4. Note that there may be more than one LIS combination, it is only necessary for you to return the length.

Your algorithm should run in O(n2) complexity.

Follow up: Could you improve it to O(n log n) time complexity?


Answer1:dp[n], dp[i]表示以nums[i]为最后一个字符的最大长度子序列，遍历j从i-1到0,
dp[i]=max（dp[i],dp[j]）,当nums[i]==nums[j]
      max(dp[i],dp[j]+1),当nums[i]>nums[j]
      ,else

class Solution {
public:
    int lengthOfLIS(vector<int>& nums) {
        if(nums.empty()) return 0;
        int n=nums.size();
        int res=0;
        vector<int> dp(n,1);
        for(int i=0;i<n;i++){
            for(int j=i-1;j>=0;j--){
                if(nums[i]<nums[j])
                  continue;
                else if(nums[i]==nums[j]) dp[i]=max(dp[i],dp[j]);
                else{
                    dp[i]=max(dp[i],dp[j]+1);
                }   
            }
            res=max(res,dp[i]); 
        }
        return res;
        
    }
};
