Given a non-empty array of integers, return the k most frequent elements.

For example,
Given [1,1,1,2,2,3] and k = 2, return [1,2].

Note: 
You may assume k is always valid, 1 ≤ k ≤ number of unique elements.
Your algorithm's time complexity must be better than O(n log n), where n is the array's size.

class Solution {
public:
    vector<int> topKFrequent(vector<int>& nums, int k) {
        int n=nums.size();
        unordered_map<int,int> mymap;
        for(int i=0;i<n;i++){
            mymap[nums[i]]++;
        }
        struct comp{
            bool operator()(const pair<int,int> &a,const pair<int,int> &b){
                return a.second<b.second;
            }
        };
        vector<int> res;
        priority_queue<pair<int,int>,vector<pair<int,int>>,comp> myqueue;
        for(auto it=mymap.begin();it!=mymap.end();it++){
            myqueue.push(make_pair(it->first,it->second));
        }
        for(int i=0;i<k;i++){
            res.push_back(myqueue.top().first);
            myqueue.pop();
        }
        return res;
    }
};
最大堆
