Related Topics: Linked List, Depth-first Search
Difficulty: Medium

Question:
Given a singly linked list where elements are sorted in ascending order, convert it to a height balanced BST.

For this problem, a height-balanced binary tree is defined as a binary tree in which the depth of the two subtrees of every node never differ by more than 1.


Example:

Given the sorted linked list: [-10,-3,0,5,9],

One possible answer is: [0,-3,9,-10,null,5], which represents the following height balanced BST:

      0
     / \
   -3   9
   /   /
 -10  5
 
 Answer1:
 /**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
public:
    TreeNode* sortedListToBST(ListNode* head) {
        if(head==NULL) return NULL;
        vector<int> storeNode;
        ListNode *start=head;
        while(start){
            storeNode.push_back(start->val);
            start=start->next;
        }
        TreeNode *root=NULL;
        buildTreeNode(&root,storeNode,0,storeNode.size()-1);
        return root;
    }
    void buildTreeNode(TreeNode **node,vector<int> &vec,int left,int right){
        if(left>right) return;
        int mid=left+(right-left)/2;
        *node =new TreeNode(vec[mid]);
        buildTreeNode(&(*node)->left,vec,left,mid-1);
        buildTreeNode(&(*node)->right,vec,mid+1,right);
    }
    
};

Answer2:
class Solution {
public:
    TreeNode* sortedListToBST(ListNode* head) {
        TreeNode *root=buildTreeNode(head,NULL);
        return root;
    }
    TreeNode* buildTreeNode(ListNode *head,ListNode *tail){
        if(head==tail) return NULL; 
        ListNode *slow=head;
        ListNode *fast=head;
        while(fast->next!=tail &&fast->next->next!=tail){
            slow=slow->next;
            fast=fast->next->next;
        }
        TreeNode *node=new TreeNode(slow->val);
        node->left=buildTreeNode(head,slow);
        node->right=buildTreeNode(slow->next,tail);
        return node;
    }
    
};
