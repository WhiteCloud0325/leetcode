Related Topics:Tree,Depth-first Search


Question:
Given a binary tree, determine if it is a valid binary search tree (BST).

Assume a BST is defined as follows:

The left subtree of a node contains only nodes with keys less than the node's key.
The right subtree of a node contains only nodes with keys greater than the node's key.
Both the left and right subtrees must also be binary search trees.
Example 1:
    2
   / \
  1   3
Binary tree [2,1,3], return true.
Example 2:
    1
   / \
  2   3
Binary tree [1,2,3], return false

Answer 1:
  使用中序遍历，将树存入数组看是否由小到大
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
public:
    bool isValidBST(TreeNode* root) {
        mediumVec=vector<int>();
        inOrder(root);
        for(auto it=mediumVec.begin()+1;it<mediumVec.end();it++){
            if(*it<=*(it-1)) 
                return false;
        }
        return true;
    }
    void inOrder(TreeNode *cur){
        if(cur){
            inOrder(cur->left);
            mediumVec.push_back(cur->val);
            inOrder(cur->right);
        }
    }
    vector<int> mediumVec;
};
