Suppose Andy and Doris want to choose a restaurant for dinner, and they both have a list of favorite restaurants represented by strings.

You need to help them find out their common interest with the least list index sum. If there is a choice tie between answers, output all of them with no order requirement. You could assume there always exists an answer.

Example 1:
Input:
["Shogun", "Tapioca Express", "Burger King", "KFC"]
["Piatti", "The Grill at Torrey Pines", "Hungry Hunter Steakhouse", "Shogun"]
Output: ["Shogun"]
Explanation: The only restaurant they both like is "Shogun".
Example 2:
Input:
["Shogun", "Tapioca Express", "Burger King", "KFC"]
["KFC", "Shogun", "Burger King"]
Output: ["Shogun"]
Explanation: The restaurant they both like and have the least index sum is "Shogun" with index sum 1 (0+1).
Note:
The length of both lists will be in the range of [1, 1000].
The length of strings in both lists will be in the range of [1, 30].
The index is starting from 0 to the list length minus 1.
No duplicates in both lists.




class Solution {
public:
    vector<string> findRestaurant(vector<string>& list1, vector<string>& list2) {
        unordered_map<string,int> maplist;
        
        unordered_map<string,int> resmap;
        vector<string>  res;
        int m=list1.size(),n=list2.size();
        int i=0,j=0;
        int minsum=INT_MAX;
        while(i<m||j<n){
            if(i!=m){
                unordered_map<string,int>::iterator it1=maplist.find(list1[i]);
                if(it1==maplist.end()){
                    maplist.insert(pair<string,int>(list1[i],i));
                    i++;
                }
                else{
                    minsum=min(minsum,i+it1->second);
                    resmap.insert(pair<string,int>(list1[i],i+it1->second));
                    i++;
                }
            }
            if(j!=n){
                unordered_map<string,int>::iterator it2=maplist.find(list2[j]);
                if(it2==maplist.end()){
                    maplist.insert(pair<string,int>(list2[j],j));
                    j++;
                }
                else{
                    minsum=min(minsum,j+it2->second);
                    resmap.insert(pair<string,int>(list2[j],j+it2->second));
                    j++;
                }
            }
        }
        for(auto it=resmap.begin();it!=resmap.end();it++){
            if(it->second==minsum)
                res.push_back(it->first);
        }
        return res;
    }
};
