Suppose an array sorted in ascending order is rotated at some pivot unknown to you beforehand.

(i.e., 0 1 2 4 5 6 7 might become 4 5 6 7 0 1 2).

You are given a target value to search. If found in the array return its index, otherwise return -1.

You may assume no duplicate exists in the array.
思路：
if nums[mid]>=nums[0] 则0...mid 是由小到大排序，if nums[0]<=target<=nums[mid] 则 right=mid-1,else target在mid...right中,left=mid+1
if nums[mid]<nums[0] 则mid...right是由小到大排序，if nums[mid]<target<nums[0],则 left在mid...right中,left=mid+1,else right=mid-1 

class Solution {
public:
    int search(vector<int>& nums, int target) {
        if(nums.empty()) return -1;
        int left=0,right=nums.size()-1,mid;
        while(left<=right){
            mid=left+(right-left)/2;
            if(nums[mid]==target) return mid;
            if(nums[mid]>=nums[0]){
                if(target<=nums[mid]&&target>=nums[0]) right=mid-1;
                else left=mid+1;
            }
            else{
                if(target>nums[mid]&&target<nums[0]) left=mid+1;
                else right=mid-1;
            }
        }
        return -1;
    }
};

改进程序
class Solution {
public:
    int search(vector<int>& nums, int target) {
        if(nums.empty()) return -1;
        int left=0,right=nums.size()-1,mid;
        while(left<right){
            mid=left+(right-left)/2+1;
            if(nums[mid]==target) return mid;
            if(nums[0]<=target ^ target<nums[mid] ^ nums[0]<nums[mid]) right=mid-1;
            else left=mid;
        }
        if(nums[right]==target) return right;
        else    return -1;
    }
};


class Solution {
public:
    int search(vector<int>& nums, int target) {
        if(nums.empty()) return -1;
        int left=0,right=nums.size()-1,mid;
        while(left<=right){
            mid=left+(right-left)/2;
            if(nums[mid]==target) return mid;
            if(nums[left]<=target ^ target<nums[mid] ^ nums[left]<=nums[mid]) right=mid-1;
            else left=mid+1;
        }
        return -1;
    }
};
