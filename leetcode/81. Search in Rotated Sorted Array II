Follow up for "Search in Rotated Sorted Array":
What if duplicates are allowed?

Would this affect the run-time complexity? How and why?
Suppose an array sorted in ascending order is rotated at some pivot unknown to you beforehand.

(i.e., 0 1 2 4 5 6 7 might become 4 5 6 7 0 1 2).

Write a function to determine if a given target is in the array.

The array may contain duplicates.

class Solution {
public:
    bool search(vector<int>& nums, int target) {
        if(nums.empty()) return false;
        int left=0,right=nums.size()-1;
        bool res=binarySearch(nums,left,right,target);
        return res;
    }
    bool binarySearch(vector<int> &nums,int left,int right,int target){
        if(left>=right){
            if(nums[right]==target) return true;
            else return false;
        }
        int mid=left+(right-left)/2+1;
        if(nums[mid]==target) return true;
        if(nums[left]==nums[right]&& nums[left]==nums[mid])
            return binarySearch(nums,mid+1,right,target) || binarySearch(nums,left,mid-1,target);
        else if(nums[left]!=nums[right]&&nums[left]==nums[mid])
            return binarySearch(nums,mid+1,right,target);
        else if(nums[left]!=nums[right]&&nums[right]==nums[mid])
            return binarySearch(nums,left,mid-1,target);
        else{
            if(nums[left]<=target ^ target<nums[mid] ^ nums[left]<nums[mid]) right=mid-1;
            else left=mid;
            return binarySearch(nums,left,right,target);
        }
    }
};
