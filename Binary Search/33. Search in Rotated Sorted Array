Difficulty: Medium
Related Topics: Binary Search, Array

Question:
Suppose an array sorted in ascending order is rotated at some pivot unknown to you beforehand.

(i.e., [0,1,2,4,5,6,7] might become [4,5,6,7,0,1,2]).

You are given a target value to search. If found in the array return its index, otherwise return -1.

You may assume no duplicate exists in the array.

Your algorithm's runtime complexity must be in the order of O(log n).

Example 1:

Input: nums = [4,5,6,7,0,1,2], target = 0
Output: 4
Example 2:

Input: nums = [4,5,6,7,0,1,2], target = 3
Output: -1

Answer1:
class Solution {
public:
    int search(vector<int>& nums, int target) {
        if(nums.empty()) return -1;
        int left=0,right=nums.size()-1,mid;
        while(left<right){
            mid=left+(right-left)/2+1;
            if(nums[mid]==target) return mid;
            if(nums[0]<=target ^ target<nums[mid] ^ nums[0]<nums[mid]) right=mid-1;
            else left=mid;
        }
        if(nums[right]==target) return right;
        else    return -1;
    }
};
Answer2:

循环初始条件：left=0,right=nums.size()-1;
循环保持条件：因为之后使用nums[left],nums[mid]和target比较,mid=(left+right)/2向left靠近，当left==right-1时
            mid=left，所以改为使用mid=(left+right)/2+1
            当nums[mid],nums[right],nums[left]==target时返回
            否则此时不存在nums[left],nums[mid],target相等情况
            nums[left]<nums[mid]<target : left=mid+1
            nums[mid]<nums[left]<target ：right=mid-1
            nums[left]<target<nums[mid]:right=mid-1
            nums[mid]<target<nums[left]:left=mid+1
            target<nums[mid]<nums[left] right=mid-1
            target<nums[left]<nums[mid] left=mid+1
            所以 target<nums[left]) ^(target<nums[mid]) ^(nums[left]<nums[mid]）==1时 left=mid+1
            else right=mid-1
          
            
class Solution {
public:
    int search(vector<int>& nums, int target) {
        if(nums.empty()) return -1;
        int left=0,right=nums.size()-1;
        while(left<right){
            int mid=(left+right)/2+1;
            if(nums[mid]==target)
                return mid;
            else if(nums[left] == target)
                return left;
            else if(nums[right] == target)
                return right;
            else{
                if((target<nums[left]) ^(target<nums[mid]) ^(nums[left]<nums[mid]))
                    left=mid+1;
                else
                    right=mid-1;
            }
        }
        if(nums[left] == target)
            return left;
        else 
            return -1;
    }
};
