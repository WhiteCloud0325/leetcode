Difficulty: Medium
Related Topics: Binary Search, Array

Question:
Suppose an array sorted in ascending order is rotated at some pivot unknown to you beforehand.

(i.e., [0,1,2,4,5,6,7] might become [4,5,6,7,0,1,2]).

You are given a target value to search. If found in the array return its index, otherwise return -1.

You may assume no duplicate exists in the array.

Your algorithm's runtime complexity must be in the order of O(log n).

Example 1:

Input: nums = [4,5,6,7,0,1,2], target = 0
Output: 4
Example 2:

Input: nums = [4,5,6,7,0,1,2], target = 3
Output: -1

Answer:
class Solution {
public:
    int search(vector<int>& nums, int target) {
        if(nums.empty()) return -1;
        int left=0,right=nums.size()-1,mid;
        while(left<right){
            mid=left+(right-left)/2+1;
            if(nums[mid]==target) return mid;
            if(nums[0]<=target ^ target<nums[mid] ^ nums[0]<nums[mid]) right=mid-1;
            else left=mid;
        }
        if(nums[right]==target) return right;
        else    return -1;
    }
};
