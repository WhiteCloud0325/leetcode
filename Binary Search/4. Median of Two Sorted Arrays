Difficulty: Hard
Related Topics: Array, Binary Search, Divid and Conquer
Question:
There are two sorted arrays nums1 and nums2 of size m and n respectively.

Find the median of the two sorted arrays. The overall run time complexity should be O(log (m+n)).

Example 1:
nums1 = [1, 3]
nums2 = [2]

The median is 2.0
Example 2:
nums1 = [1, 2]
nums2 = [3, 4]

The median is (2 + 3)/2 = 2.5

Answer:
class Solution {
public:
    double findMedianSortedArrays(vector<int>& nums1, vector<int>& nums2) {
        int m=nums1.size(),n=nums2.size();
        int lmedian=(m+n+1)/2;
        int rmedian=(m+n+2)/2;
        int temp1=findKth(nums1,0,nums2,0,lmedian);
        int temp2=findKth(nums1,0,nums2,0,rmedian);
        return (temp1+temp2)/2.0;
        
    }
    int findKth(vector<int> &nums1,int left1,vector<int> &nums2,int left2,int k){
        if(left1>(int)(nums1.size()-1)) return nums2[left2+k-1];
        if(left2>(int)(nums2.size()-1)) return nums1[left1+k-1];
        if(k==1) return min(nums1[left1],nums2[left2]);
        int m1=INT_MAX,m2=INT_MAX;
        if(left1+k/2-1<nums1.size()) m1=nums1[left1+k/2-1];
        if(left2+k/2-1<nums2.size()) m2=nums2[left2+k/2-1];
        
        if(m1<=m2)
            return findKth(nums1,left1+k/2,nums2,left2,k-k/2);
        
        else
            return findKth(nums1,left1,nums2,left2+k/2,k-k/2);
    }
};
