Given an array of numbers nums, in which exactly two elements appear only once and all the other elements appear exactly twice. Find the two elements that appear only once.

For example:

Given nums = [1, 2, 1, 3, 2, 5], return [3, 5].

Note:
The order of the result is not important. So in the above example, [5, 3] is also correct.
Your algorithm should run in linear runtime complexity. Could you implement it using only constant space complexity?
数组中所有元素均出现过两次，除了两个不相同的元素，设为a和b。当我们将数组中所有元素均进行异或后，能够得到c = a ^ b。那么如何从c解出a和b呢？
事实上，a和b互不相同，则a ^ b的值一定不为0，所以c不为0。设c的第m位为1，那么这个1肯定来自a或者b。我们以此将数组分为两部分，第一部分是该m位含有1的，
设为x；另一部分是第m位为0的，设为y。令x中所有元素进行异或，那么得出的值为a或者b中第m位含有1的那个数；同理可得a和b中第m位为0的那个数，从而得到a和b的值。

class Solution {
public:
    vector<int> singleNumber(vector<int>& nums) {
        vector<int> res(2);
        int sum=0;
        for(int i=0;i<nums.size();i++)
            sum^=nums[i];
        int pos=1;
        while(sum){
            if(sum&pos) break;
            pos<<=1;
        }
        for(int i=0;i<nums.size();i++){
            if(nums[i]&pos) res[0]^=nums[i];
            else res[1]^=nums[i];
        }
        return res;
    }
};
