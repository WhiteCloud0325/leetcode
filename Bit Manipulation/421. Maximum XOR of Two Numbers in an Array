Given a non-empty array of numbers, a0, a1, a2, … , an-1, where 0 ≤ ai < 231.

Find the maximum result of ai XOR aj, where 0 ≤ i, j < n.

Could you do this in O(n) runtime?

Example:

Input: [3, 10, 5, 25, 2, 8]

Output: 28

Explanation: The maximum result is 5 ^ 25 = 28.

class Solution {
public:
    class TreeNode{
    public:
        TreeNode *next[2];
        TreeNode(){ next[0]=NULL;next[1]=NULL;}
    };
    TreeNode* buildTree(vector<int>& nums){
        TreeNode * root=new TreeNode(),*cur;
        int n=nums.size();
        for(int i=0;i<n;i++){
            cur=root;
            for(int j=31;j>=0;j--){
                int index=(nums[i]>>j)&1;
                if(cur->next[index]==NULL)
                    cur->next[index]=new TreeNode();
                cur=cur->next[index];
            }
        }
        return root;
        
    }
    int xorResult(TreeNode *root,int num){
        int res = 0;
        TreeNode *cur=root;
        for (int i = 31; i >= 0; i--) {
            int index = ((num >> i) & 1) ? 0 : 1;
            if (cur->next[index]) {
                res <<= 1;
                res |= 1;
                cur = cur->next[index];
            } else {
                res <<= 1;
                res |= 0;
                cur = cur->next[index ? 0 : 1];
            }
        }
        return res;
    }
    int findMaximumXOR(vector<int>& nums) {
        if(nums.size()<2) return 0;
        TreeNode *root=buildTree(nums);
        int maxXor=0;
        for(int i=0;i<nums.size();i++){
            int temp=xorResult(root,nums[i]);
            maxXor=max(maxXor,temp);
        }
        return maxXor;
    }
};
