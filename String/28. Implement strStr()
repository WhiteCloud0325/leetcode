Difficulty: Easy
Related Topics: String, Two Pointers

Question:
Implement strStr().

Return the index of the first occurrence of needle in haystack, or -1 if needle is not part of haystack.

Example 1:

Input: haystack = "hello", needle = "ll"
Output: 2
Example 2:

Input: haystack = "aaaaa", needle = "bba"
Output: -1

Answer1:
class Solution {
public:
    int strStr(string haystack, string needle) {
        int len1=haystack.length(),len2=needle.length();
        int p1_end=len2-1;
        int p1,p2;
        for(p1=0;p1_end<len1;++p1_end){
            int p1_old=p1;
            p2=0;
            while(p1<len1 && p2<len2 && haystack[p1]==needle[p2]){
                ++p1;
                ++p2;
            }
            if(p2==len2) return p1_old;
            p1=p1_old+1;
        }
        return -1;
    }
};

Answer2:使用KMP算法，preprocess是对needle字符串进行预处理求出部分匹配表，KMP使用算法求出首个匹配字符串位置，但要注意needle为空字符串结果返回0
class Solution {
public:
    int strStr(string haystack, string needle) {
        return KMP(haystack,needle);
    }
    vector<int> preprocess(string str){
        int len = str.length();
        vector<int> res(len, 0);
        int j = 0;
        for (int i = 1; i < len; i++){
            j = res[i - 1];
            while (j > 0 && str[j] != str[i]) 
                j = res[j-1];
            if (str[j] == str[i]) 
                j = j + 1;
            res[i] = j;
        }
        return res;
    }
    int KMP(string haystack, string needle){
        vector<int> Pre = preprocess(needle);
        if(Pre.size()==0) return 0;
        int i = 0;
        int j = 0;
        while (i < haystack.length()){

            while (j > 0 && haystack[i] != needle[j]) j = Pre[j - 1];
            if (haystack[i] == needle[j]) j = j + 1;
            ++i;
            if (j == needle.length()){ return i - needle.length(); }
        }
        return -1;
    }
};
