263. 丑数

给你一个整数 n ，请你判断 n 是否为 丑数 。如果是，返回 true ；否则，返回 false 。

丑数 就是只包含质因数 2、3 和/或 5 的正整数。

 

示例 1：

输入：n = 6
输出：true
解释：6 = 2 × 3
示例 2：

输入：n = 8
输出：true
解释：8 = 2 × 2 × 2
示例 3：

输入：n = 14
输出：false
解释：14 不是丑数，因为它包含了另外一个质因数 7 。

方法一：
bool isUgly(int n) {
    if (n == 0) return false;
    while(n %2 == 0) {
        n /= 2;
    }
    while(n %3 == 0) {
        n /=3;
    }
    while(n % 5 == 0) {
        n /= 5;
    }
    return n == 1;
}

264. 丑数 II
给你一个整数 n ，请你找出并返回第 n 个 丑数 。

丑数 就是只包含质因数 2、3 和/或 5 的正整数。

 

示例 1：

输入：n = 10
输出：12
解释：[1, 2, 3, 4, 5, 6, 8, 9, 10, 12] 是由前 10 个丑数组成的序列。
示例 2：

输入：n = 1
输出：1
解释：1 通常被视为丑数。
 

提示：

1 <= n <= 1690

方法一：
int nthUglyNumber(int n) {
    if (n <= 1) return n;
    vector<int> ugly(n, 0);
    ugly[0] = 1;
    vector<int> pos(3, 0);
    for (int i = 1; i < n; ++i) {
        int res1 = ugly[pos[0]] * 2;
        int res2 = ugly[pos[1]] * 3;
        int res3 = ugly[pos[2]] * 5;
        int res = min(res1, min(res2, res3));
        ugly[i] = res;
        if (res == ugly[pos[0]] * 2) pos[0]++;
        if (res == ugly[pos[1]] * 3) pos[1]++;
        if (res == ugly[pos[2]] * 5) pos[2]++;
    }
    return ugly[n - 1];
}
