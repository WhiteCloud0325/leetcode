46.全排列(数组没有重复元素)
给定一个 没有重复 数字的序列，返回其所有可能的全排列。

示例:

输入: [1,2,3]
输出:
[
  [1,2,3],
  [1,3,2],
  [2,1,3],
  [2,3,1],
  [3,1,2],
  [3,2,1]
]

方法一： 回溯, 深度遍历
vector<vector<int>> permute(vector<int>& nums) {
    vector<int> cur;
    vector<vector<int>> res;
    vector<bool> use(nums.size(), false);
    dfs(nums, use, cur, res);
    return res;
}
void dfs(vector<int> &nums, vector<bool> &use, vector<int> &cur, vector<vector<int>> &res) {
    if (cur.size() == nums.size()) {
        res.push_back(cur);
        return;
    }
    for (int i = 0; i < nums.size(); ++i) {
        if (use[i] == true) continue;

        use[i] = true;
        cur.push_back(nums[i]);
        dfs(nums, use, cur, res);

        use[i] = false;
        cur.pop_back();
    }
}

47. 全排列 II(数组有重复元素)
给定一个可包含重复数字的序列 nums ，按任意顺序 返回所有不重复的全排列。

 

示例 1：

输入：nums = [1,1,2]
输出：
[[1,1,2],
 [1,2,1],
 [2,1,1]]
示例 2：

输入：nums = [1,2,3]
输出：[[1,2,3],[1,3,2],[2,1,3],[2,3,1],[3,1,2],[3,2,1]]
 

提示：

1 <= nums.length <= 8
-10 <= nums[i] <= 10

方法一： 先将数组排个序， 回溯时如果当前数与前一个数相同并且前一个数标识为未使用，这种情况已经统计过，跳过
vector<vector<int>> permuteUnique(vector<int>& nums) {
    vector<bool> use(nums.size(), false);
    vector<int> cur;
    vector<vector<int>> res;
    sort(nums.begin(), nums.end());
    backtracking(nums, use, cur, res);
    return res;
}

void backtracking(vector<int> &nums, vector<bool> &use, vector<int> &cur, vector<vector<int>> & res) {
    if (cur.size() == nums.size()) {
        res.push_back(cur);
        return;
    }

    for (int i = 0; i < nums.size(); ++i) {
        if (use[i] == true) {
            continue;
        }
        if (i > 0 && nums[i] == nums[i - 1] && use[i - 1] == false) {
            continue;
        }

        use[i] = true;
        cur.push_back(nums[i]);

        backtracking(nums, use, cur, res);

        use[i] = false;
        cur.pop_back();
    }
} 
