设计一个支持 push ，pop ，top 操作，并能在常数时间内检索到最小元素的栈。

push(x) —— 将元素 x 推入栈中。
pop() —— 删除栈顶的元素。
top() —— 获取栈顶元素。
getMin() —— 检索栈中的最小元素。
 

示例:

输入：
["MinStack","push","push","push","getMin","pop","top","getMin"]
[[],[-2],[0],[-3],[],[],[],[]]

输出：
[null,null,null,null,-3,null,0,-2]

解释：
MinStack minStack = new MinStack();
minStack.push(-2);
minStack.push(0);
minStack.push(-3);
minStack.getMin();   --> 返回 -3.
minStack.pop();
minStack.top();      --> 返回 0.
minStack.getMin();   --> 返回 -2.
 

提示：

pop、top 和 getMin 操作总是在 非空栈 上调用。


方法一：使用辅助栈
class MinStack {
public:
    /** initialize your data structure here. */
    MinStack() {

    }
    
    void push(int val) {
        st1.push(val);
        if (st2.empty() || val <= st2.top()) { //必须等于st2.top()的也要push, 否则有多个最小值时，在pop的时候导致st2.pop，st2为空，而st1还有最小值存在
            st2.push(val);
        }
    } 
    
    void pop() {
        if (st1.top() == st2.top()) {
            st2.pop();
        }
        st1.pop();
    }
    
    int top() {
        return st1.top();
    }
    
    int getMin() {
        return st2.top();
    }
    stack<int> st1;
    stack<int> st2;
};

方法二：不使用辅助栈, minVal存当前最小值, 栈用来存差值, st.push(val - minVal), 要注意越界问题
class MinStack {
public:
    /** initialize your data structure here. */
    MinStack() {

    }
    
    void push(int val) {
        if (st.empty()) {
            minVal = val;
        }

        st.push((long)val - minVal);
        minVal = min(minVal ,val);
    }
    
    void pop() {
        if (st.top() < 0) {
            minVal -= st.top();
        }
        st.pop();
    }
    
    int top() {
        if (st.top() <= 0) return minVal;

        return st.top() + minVal; 
    }
    
    int getMin() {
        return minVal;
    }
    stack<long> st;
    int minVal;
};
