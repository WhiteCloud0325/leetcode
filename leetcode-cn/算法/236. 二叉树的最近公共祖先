给定一个二叉树, 找到该树中两个指定节点的最近公共祖先。

百度百科中最近公共祖先的定义为：“对于有根树 T 的两个节点 p、q，最近公共祖先表示为一个节点 x，满足 x 是 p、q 的祖先且 x 的深度尽可能大（一个节点也可以是它自己的祖先）。”

 

示例 1：


输入：root = [3,5,1,6,2,0,8,null,null,7,4], p = 5, q = 1
输出：3
解释：节点 5 和节点 1 的最近公共祖先是节点 3 。

方法一：深搜
TreeNode* lowestCommonAncestor(TreeNode* root, TreeNode* p, TreeNode* q) {
    if (root == NULL) return NULL;
    TreeNode* res = dfs(root, p, q);
    return res;
}

TreeNode* dfs(TreeNode* root, TreeNode *p, TreeNode* q) {
    if (root == NULL) return NULL;
    if (root == p || root == q) {
        return root;
    }

    TreeNode* left = dfs(root->left, p, q);
    TreeNode* right = dfs(root->right, p, q);
    if (left && right) {
        return root;
    }
    else if (left && !right) {
        return left;
    }
    else if (!left && right) {
        return right;
    }
    else {
        return NULL;
    }
}
