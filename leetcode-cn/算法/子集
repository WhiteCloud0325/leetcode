78. 子集(数组不含重复元素)
给你一个整数数组 nums ，数组中的元素 互不相同 。返回该数组所有可能的子集（幂集）。

解集 不能 包含重复的子集。你可以按 任意顺序 返回解集。

 

示例 1：

输入：nums = [1,2,3]
输出：[[],[1],[2],[1,2],[3],[1,3],[2,3],[1,2,3]]
示例 2：

输入：nums = [0]
输出：[[],[0]]
 

提示：

1 <= nums.length <= 10
-10 <= nums[i] <= 10
nums 中的所有元素 互不相同

方法一： 建设数组有n-1个元素的子集是set1, 数组有n个元素的子集是 第n个元素与set1所有结果的组合 
vector<vector<int>> subsets(vector<int>& nums) {
    vector<vector<int>> res;
    vector<int> tmp;
    res.push_back(tmp);
    for (auto num : nums) {
        int size = res.size();
        for (int j = 0; j < size; j ++) {
            vector<int> cur = res[j];
            cur.push_back(num);
            res.push_back(cur);
        }
    }
    return res;
}


90. 子集 II(数组可能包含重复元素)
给你一个整数数组 nums ，其中可能包含重复元素，请你返回该数组所有可能的子集（幂集）。

解集 不能 包含重复的子集。返回的解集中，子集可以按 任意顺序 排列。

 

示例 1：

输入：nums = [1,2,2]
输出：[[],[1],[1,2],[1,2,2],[2],[2,2]]
示例 2：

输入：nums = [0]
输出：[[],[0]]
 

提示：

1 <= nums.length <= 10
-10 <= nums[i] <= 10

方法一：因为数组有重复元素， 先对数组排序, 假设数组元素为n-2是为set1， n-1时为set2, 
如果第n个元素与第n-1元素不同，新增子集是第n个元素是与set2的组合
如果第n个元素与第n-1元素相同, 新增子集是 set1 - set2 的集合的组合
vector<vector<int>> subsetsWithDup(vector<int>& nums) {
    sort(nums.begin(), nums.end());
    vector<vector<int>> res;
    vector<int> emptySet;
    res.push_back(emptySet);
    int start = 0, preSize = 0, curSize = res.size();
    for (int i = 0; i < nums.size(); ++i) {
        if (i > 0 && nums[i] == nums[i - 1]) {
            start = preSize;
        }
        else {
            start = 0;
        }
        for (int j = start; j < curSize; ++j) {
            vector<int> tmp = res[j];
            tmp.push_back(nums[i]);
            res.push_back(tmp);
        }
        preSize = curSize;
        curSize = res.size();
    }
    return res;
}
