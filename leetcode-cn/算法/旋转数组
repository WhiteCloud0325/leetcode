1. 搜索旋转排序数组  
整数数组 nums 按升序排列，数组中的值 互不相同 。

在传递给函数之前，nums 在预先未知的某个下标 k（0 <= k < nums.length）上进行了 旋转，使数组变为 [nums[k], nums[k+1], ..., nums[n-1], nums[0], nums[1], ..., nums[k-1]]（下标 从 0 开始 计数）。例如， [0,1,2,4,5,6,7] 在下标 3 处经旋转后可能变为 [4,5,6,7,0,1,2] 。

给你 旋转后 的数组 nums 和一个整数 target ，如果 nums 中存在这个目标值 target ，则返回它的索引，否则返回 -1 。

 

示例 1：

输入：nums = [4,5,6,7,0,1,2], target = 0
输出：4
示例 2：

输入：nums = [4,5,6,7,0,1,2], target = 3
输出：-1
示例 3：

输入：nums = [1], target = 0
输出：-1
 

提示：

1 <= nums.length <= 5000
-10^4 <= nums[i] <= 10^4
nums 中的每个值都 独一无二
nums 肯定会在某个点上旋转
-10^4 <= target <= 10^4

答案一： 二分查找，if else 判断
int search(vector<int>& nums, int target) {
    if (nums.empty()) return -1;
    int left = 0, right = nums.size() - 1;
    while(left <= right) {
        int mid = left + (right - left ) / 2;
        if (target == nums[mid]) return mid;
        if (target == nums[right]) return right;
        else if (target < nums[right]) {
            if (nums[mid] <= nums[right]) {
                if (target < nums[mid]) {
                    right = mid - 1;
                } 
                else {
                    left = mid + 1;
                }
            } 
            else {
                left = mid + 1;
            }
        } 
        else {
            if (nums[mid] <= nums[right]) {
                right = mid - 1;
            }
            else {
                if (target < nums[mid]) {
                    right = mid - 1;
                }
                else {
                    left = mid + 1;
                }
            }
        }
    }

    return -1;
}

答案二： 二分查找 优化版本
int search(vector<int>& nums, int target) {
    if (nums.empty()) return -1;
    int left = 0, right = nums.size() - 1;
    while(left <= right) {
        int mid = left + (right - left ) / 2;
        if (target == nums[mid]) return mid;
        if (target == nums[right]) return right;
        /*if ((target < nums[mid] && nums[mid] < nums[right]) || 
            (nums[mid] < nums[right] && nums[right] < target) ||
            (nums[right] < target && target < nums[mid])) {
            right = mid - 1;
        }*/
        if ((target < nums[mid]) ^ (target < nums[right]) ^ (nums[mid] < nums[right])) {
            right = mid - 1;
        }
        else {
            left = mid + 1;
        }
    }

    return -1;
}

3. 寻找旋转排序数组中的最小值
假设按照升序排序的数组在预先未知的某个点上进行了旋转。例如，数组 [0,1,2,4,5,6,7] 可能变为 [4,5,6,7,0,1,2] 。

请找出其中最小的元素。

 

示例 1：

输入：nums = [3,4,5,1,2]
输出：1
示例 2：

输入：nums = [4,5,6,7,0,1,2]
输出：0
示例 3：

输入：nums = [1]
输出：1

答案一：二分查找
int findMin(vector<int>& nums) {
    int left = 0, right = nums.size() - 1, mid = 0;
    while (left < right) {
        mid = left + ((right - left) >> 1);
        if (nums[mid] < nums[right]) {
            right = mid;
        } 
        else {
            left = mid + 1;
        }
    }
    return nums[left];
}

4.寻找旋转排序数组中的最小值 II
假设按照升序排序的数组在预先未知的某个点上进行了旋转。

( 例如，数组 [0,1,2,4,5,6,7] 可能变为 [4,5,6,7,0,1,2] )。

请找出其中最小的元素。

注意数组中可能存在重复的元素。

示例 1：

输入: [1,3,5]
输出: 1
示例 2：

输入: [2,2,2,0,1]
输出: 0
说明：

这道题是 寻找旋转排序数组中的最小值 的延伸题目。
允许重复会影响算法的时间复杂度吗？会如何影响，为什么？

答案一：
int findMin(vector<int>& nums) {
    int left = 0, right = nums.size() - 1, mid = 0;
    while (left < right) {
        mid = left + ((right - left) >> 1);
        if (nums[mid] < nums[right]) {
            right = mid;
        } else if (nums[mid] > nums[right]){
            left = mid + 1;
        } else {
            --right;
        }
    }
    return nums[left];
}
