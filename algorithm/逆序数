problem：在一个排列中，如果一对数的前后位置与大小顺序相反，即前面的数大于后面的数，那么它们就称为一个逆序。一个排列中逆序的总数就称为这个排列的逆序数。

Answer1：
直接法:时间复杂度O（n^2）
int	inverseNum(vector<int> &nums) {
	int res = 0;
	for (int i = 0; i < nums.size(); i++) {
		for (int j = i + 1; j < nums.size(); j++) {
			if (nums[i] > nums[j])
				res++;
		}
	}
	return res;
}

Answer2:归并排序
class Solution {
public:
	int res = 0;
	int inverseNum(vector<int> &nums) {
		mergeSort(nums, 0, nums.size() - 1);
		return res;
	}
	void merge(vector<int>& nums,int start,int mid,int end) {
		int len1 = mid - start+1;
		int len2 = end - mid ;
		vector<int> array1(nums.begin() + start, nums.begin() + mid+1);
		vector<int> array2(nums.begin() + mid+1, nums.begin() + end + 1);
		int i = 0, j = 0;
		while (i < len1 && j < len2) {
			if (array1[i] < array2[j]) {
				nums[start + i + j] = array1[i];
				i++;
			}
			else {
				nums[start + i + j] = array2[j];
				j++;
				res += len1 - i;
			}
		}
		while (i < len1) {
			nums[start + i + j] = array1[i];
			i++;
		}
		while (j < len2) {
			nums[start + i + j] = array2[j];
			j++;
		}
	}
	void mergeSort(vector<int> &nums,int start,int end) {
		if (end > start) {
			int mid = start + (end - start) / 2;
			mergeSort(nums, start, mid);
			mergeSort(nums, mid+1, end);
			merge(nums, start, mid, end);
		}

	}
};
