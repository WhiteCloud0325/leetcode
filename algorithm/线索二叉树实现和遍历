 对于n个节点的二叉树，在二叉链存储结构中有n+1个空链域，
 利用这些空链域存放在某种遍历次序下该节点的前驱节点和后继节点的指针，这些指针称为线索，加上线索的二叉树称为线索二叉树（Threaded BinaryTree）。
 用两个表示表示子树是是孩子还是前驱（或后继）
 树的左子节点指向左孩子或前驱
 树的右子节点指向由孩子或后继
 ltag  0  孩子  1   前驱
 rtag  0  孩子  1   后继

//线索二叉树 threaded_tree
struct TreeNode{
	int ltag;	//1表示线索，0表示孩子
	int rtag;	//1表示线索，0表示孩子
	TreeNode *left;
	TreeNode *right;
	int val;
	TreeNode(int x) : ltag(0),rtag(0),val(x), left(NULL), right(NULL) {}
};

/*
@function:first
@brief:寻找线索二叉树的中序下第一个节点
@param：root 线索二叉树任意一个节点
@return：此线索二叉树第一个节点
*/

TreeNode* first(TreeNode *root){
	if (!root) return NULL;
	while (root->ltag == 0){
		root = root->left;
	}
	return root;
}
/*
function:next
@brief:求中序线索二叉树中某节点的后继
@param:p 某节点
@return: 后继节点
*/
TreeNode* next(TreeNode *p){
	if (!p) return NULL;
	if (p->rtag) return p->right;
	else return first(p->right);
}
/*
function:in_order
@brief:中序遍历线索二叉树
@param:root树根
		visit访问数据节点函数
@return:无
*/
void in_order(TreeNode *root,int (*visit)(TreeNode*)){
	TreeNode *cur = first(root);
	while (cur){
		visit(cur);
		cur = next(cur);
	}
}

/*
function:	in_thread
@brief:	中序线索化二叉树主过程 建立当前节点的前驱和前驱pre的后继
@param:	p 当前要处理的节点
		pre 当前节点的前驱节点
@return:	无
*/
void in_thread(TreeNode *p, TreeNode **pre){
	if (p){
		in_thread(p->left, pre);
		if (p->left == NULL){ //左子树为空建立前驱
			p->left = *pre;
			p->ltag = 1;
		}
		//建立前驱节点的后继
		if ((*pre) != NULL &&
			(*pre)->right == NULL){
			(*pre)->right = p;
			(*pre)->rtag = 1;
		}
		*pre = p;//更新前驱
		in_thread(p->right,pre); //线索化右子树
	}
}
/**
 @brief 建立中序线索二叉树
 @param root 树根节点
 @return 无
*/
void create_in_thread(TreeNode *root){
	TreeNode *pre = NULL;
	if (root != NULL){
		in_thread(root, &pre);
		pre->right = NULL;
		pre->rtag = 1;
	}
}
