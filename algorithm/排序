一、插入排序

1.直接插入排序(Straight Insertion Sort)： 把排序的n个元素分成已排序表和无序表，每次从无序表取一个元素与有序表元素比较插入到合适位置。
初始有序表中只有一个元素啊a[0],依次从1到n-1元素插入到有序表中，每次插入时都是从有序表最后一个元素开始比较。
void straight_insert_sort(vector<int> &nums){
	for (int i = 1; i < nums.size(); i++){
		for (int j = i - 1; j >= 0; j--){
			if (nums[j] < nums[j + 1]) break;
			int temp = nums[j];
			nums[j] = nums[j + 1];
			nums[j + 1] = temp;
		}
	}
}

2.折半插入排序(Binary Insertion Sort):与直接插入排序不同的是，插入动作使用Binary Search（折半查找）
void binary_insertion_sort(vector<int> &nums){
	for (int i = 1; i < nums.size(); i++){
		int left = 0; int right = i;
		while (left < right){
			int mid = (left + right) >> 1 ;
			if (nums[i] < nums[mid])
				right = mid;
			else
				left = mid+1;
		}
		int temp = nums[i];
		nums.erase(nums.begin() + i);
		nums.insert(nums.begin() + left, temp);
	}
}
Answer2:
void binary_insertion_sort(vector<int> &nums){
	for (int i = 1; i < nums.size(); i++){
		int left = 0; int right = i-1;
		while (left <= right){
			int mid = (left + right) >> 1 ;
			if (nums[i] < nums[mid])
				right = mid-1;
			else
				left = mid+1;
		}
		int temp = nums[i];
		nums.erase(nums.begin() + i);
		nums.insert(nums.begin() + left, temp);
	}
}
3.希尔插入排序(shell)
设待排序序列有n个元素，首先取一个整数gap = gap/3+1作为间隔。将全部元素分为gap个子序列，所有距离为gap的元素放在同一个子序列中，在每一个子序列中分别拖行
直接插入排序。然后缩小gap，取gap=gap/3+1.重复上述的子序列划分和排序工作.直到最后gap=1.将所有元素放在同一序列中排序为止。

void shell_sort(vector<int> &nums){
	int gap = nums.size();
	while (gap > 1){
		gap = gap / 3 + 1;
		int i, j,tmp;
		for (i = gap; i<nums.size(); i++){
			tmp = nums[i];
			for (j = i - gap; j >= 0 &&tmp < nums[j]; j -= gap)
				nums[j + gap] = nums[j];
			nums[j + gap] = tmp;
		}
	}
}

二、交换排序（设排序数组为N）
1.冒泡排序：从前往后两两比较相邻元素的值，如果发生逆序则交换他们，直到序列完成，则最大的数就排到数组最后一位，排序序列从最后减少一个，依次从前往后排序。
void bubble_sort(vector<int> &nums){
	for (int i = nums.size() - 1; i >= 1; i--){
		for (int j = 0; j < i; j++){
			if (nums[j] > nums[j + 1]){
				int temp = nums[j];
				nums[j] = nums[j + 1];
				nums[j + 1] = temp;
			}
		}
	}
}

从后往前最小值冒到最前面
void bubble_sort(vector<int> &nums){
	for (int i = 0; i < nums.size() - 1; i++){
		for (int j = nums.size() - 1; j > i; j--){
			if (nums[j] < nums[j - 1]){
				int temp = nums[j];
				nums[j] = nums[j - 1];
				nums[j - 1] = temp;
			}
		}
	}
}

2.快速排序(quick sort)
基本思想是任取待排序元素序列中的某个元素（例如取第一个元素）作为基准，按照该元素的关键字大小，将整个元素序列划分为左右两个子序列：
左侧子序列中所有元素的关键字都小于基准元素的关键字，右侧子序列中所有元素的关键字都大于或等于基准元素的关键字，
基准元素则排在这两个子序列中间（这也是该元素最终应该安放的位置）。然后分别对这两个子序列重复施行上述算法，直到所有的元素都排在相应位置为止。

void quick_sort(vector<int>&nums ,int start,int end){
	if (start >= end - 1) return;
	int tmp = nums[start];
	int i = start, j = end-1;
	while (i < j){
		while (i<j && nums[j] >= tmp) j--;
		nums[i] = nums[j];
		while (i<j && nums[i] <= tmp) i++;
		nums[j] = nums[i];
	}
	nums[i] = tmp;
	quick_sort(nums, start, i );
	quick_sort(nums,i + 1, end);
}
三、选择排序
1.简单选择排序
步骤：
(1)在a[i]...a[n-1]选择最小的元素；
(2）如果最小元素位置不是a[i]则交换p[i]和最小元素
(3)剩下的a[i+1]a[n-1]重复(2)
void simple_selection_sort(vector<int> &nums) {
	for (int i = 0; i <=nums.size()-2; i++) {
		int tmp = i;
		for (int j = i + 1; j < nums.size(); j++) {
			if (nums[j] <nums[tmp]) 
				tmp = j;
		}
		if (tmp != i) {
			swap(nums[i], nums[tmp]);
		}
	}
}
