对于二叉树遍历使用递归或栈的空间复杂度为O(n)，使用Morris Traversal空间复杂度O（1）
Morris Traversal和线索树相似，但Morris Traversal 是一边建线索一边访问数据，访问完后销毁线索，保持二叉树不变。

一、Morris中序遍历
过程：
  1.初始化当前节点cur为root节点；
  2.如果cur没有左孩子，则输出当前节点，并将其右孩子作为当前节点，即cur=cur->right;
  3.如果cur有左孩子，则寻找cur的前驱，即cur左子树的最右下角节点。
    a)如果前驱的右孩子为空，将它的右孩子指向当前节点，当前节点更新为当前节点的左孩子；
    b)如果前驱的右孩子为当前节点，将它的右孩子重新设为空（恢复树的形状），输出当前节点，当前节点更新为当前节点的右孩子；
  4.重复2、 3 步骤直至cur为空
Answer:
void inorderMorris(TreeNode *root,vector<int> &res){
    TreeNode *cur=root;
    TreeNode *pre=NULL;
    while(cur){
        if(!cur->left){
            res.push_back(cur->val);
            pre=cur;
            cur=cur->right;
        }
        else{
            //查找前驱
            TreeNode *node=cur->left;
            while(node->right && node->right !=cur){
                node=node->right;
            }
            if(node->right==NULL){
                node->right=cur;
                cur=cur->left;
            }
            else{
                res.push_back(cur->val);
                node->right=NULL;
                pre=cur;
                cur=cur->right;
            }
        }
    }
}

先序遍历和中序遍历唯一的不同在于，中序遍历步骤3在(b)输出，先序遍历在步骤3(a)输出
二、Morris先序遍历
过程：
  1.初始化当前节点cur为root节点；
  2.如果cur没有左孩子，则输出当前节点，并将其右孩子作为当前节点，即cur=cur->right;
  3.如果cur有左孩子，则寻找cur的前驱，即cur左子树的最右下角节点。
    a)如果前驱的右孩子为空，将它的右孩子指向当前节点，输出当前节点，当前节点更新为当前节点的左孩子；
    b)如果前驱的右孩子为当前节点，将它的右孩子重新设为空（恢复树的形状），当前节点更新为当前节点的右孩子；
  4.重复2、 3 步骤直至cur为空
  
Answer:
void preorderMorris(TreeNode *root,vector<int> &res){
    TreeNode *cur=root;
    while(cur){
        if(!cur->left){
            res.push_back(cur->val);
            cur=cur->right;
        }
        else{
            //查找前驱
            TreeNode *node=cur->left;
            while(node->right && node->right !=cur){
                node=node->right;
            }
            if(node->right==NULL){
                res.push_back(cur->val);
                node->right=cur;
                cur=cur->left;
            }
            else{
                node->right=NULL;
                cur=cur->right;
            }
        }
    }
}
  
三、后序遍历  
Morris后序遍历需要创建一个临时节点dump，令其左孩子是root节点，并且需要一个子过程，倒序输出某两个节点之间路径上的所有节点。
步骤：
  1.初始化当前节点cur为root节点；
  2.如果cur没有左孩子，并将其右孩子作为当前节点，即cur=cur->right;
  3.如果cur有左孩子，则寻找cur的前驱，即cur左子树的最右下角节点。
    a)如果前驱的右孩子为空，将它的右孩子指向当前节点，当前节点更新为当前节点的左孩子；
    b)如果前驱的右孩子为当前节点，将它的右孩子重新设为空（恢复树的形状），倒序输出从当前节点的左孩子到该前驱节点这条路径上的所有节点。当前节点更新为当前节点的右孩子；
  4.重复2、 3 步骤直至cur为空.
 void postorderMorris(TreeNode *root,vector<int> &res){
        TreeNode dump=TreeNode(0);
        dump.left=root;
        TreeNode *cur=&dump;    //当前节点
        while(cur){
            if(cur->left==NULL){
                cur=cur->right;
            }
            else{
                //寻找前驱
                TreeNode *node=cur->left;
                while(node->right && node->right!=cur)
                    node=node->right;
            
                if(node->right==NULL){
                    node->right=cur;
                    cur=cur->left;
                }
                else{
                    reverseVisit(cur->left,node,res);
                    node->right=NULL;
                    cur=cur->right;
                }
            }
        }
    }
    void reverseVisit(TreeNode *from ,TreeNode *to,vector<int> &res){
        res.push_back(from->val);
        auto it=res.end()-1;
        while(from!=to){
            from=from->right;
            it=res.insert(it,from->val);
        }
    }


  
