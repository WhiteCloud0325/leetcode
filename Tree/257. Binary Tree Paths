Related Topics: Tree, Depth-first Search
Difficulty: Easy

Question:
Given a binary tree, return all root-to-leaf paths.

For example, given the following binary tree:

   1
 /   \
2     3
 \
  5
All root-to-leaf paths are:

["1->2->5", "1->3"]

Answer1:
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
public:
    vector<string> binaryTreePaths(TreeNode* root) {
        vector<string> res;
        if(root==NULL) return res;
        string s="";
        build(root,res,s);
        return res;
        
    }
    void build(TreeNode *root, vector<string> &res,string s){
        s+=to_string(root->val);
        if(root->left==NULL &&root->right==NULL){
            res.push_back(s);
            return;
        }
        s+="->";
        if(root->left) build(root->left,res,s);
        if(root->right) build(root->right,res,s);
        
    }
};

Answer2:把string s当做栈，计算完当前节点把节点之后插入的元素全部删除，节省另外创建string空间
class Solution {
public:
    vector<string> binaryTreePaths(TreeNode* root) {
        vector<string> res;
        if(root==NULL) return res;
        string s="";
        DFS(root,res,s);
        return res;
        
    }
    void DFS(TreeNode *root, vector<string> &res,string &s){
        s+=to_string(root->val);
        if(root->left==NULL &&root->right==NULL){
            res.push_back(s);
            return;
        }
        s+="->";
        size_t found= s.length();
        if(root->left){
            DFS(root->left,res,s);
            s.erase(found);
        }
        if(root->right){ 
            DFS(root->right,res,s);
            s.erase(found);
        }
    }
};
