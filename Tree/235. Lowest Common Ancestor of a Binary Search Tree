Related Topics: Tree
Difficulty: Easy


Question:
Given a binary search tree (BST), find the lowest common ancestor (LCA) of two given nodes in the BST.

According to the definition of LCA on Wikipedia: “The lowest common ancestor is defined between two nodes v and w as the lowest node in T that has both v and w as descendants (where we allow a node to be a descendant of itself).”

        _______6______
       /              \
    ___2__          ___8__
   /      \        /      \
   0      _4       7       9
         /  \
         3   5
For example, the lowest common ancestor (LCA) of nodes 2 and 8 is 6. Another example is LCA of nodes 2 and 4 is 2, since a node can be a descendant of itself according to the LCA definition.


Answer1:
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
public:
    TreeNode* lowestCommonAncestor(TreeNode* root, TreeNode* p, TreeNode* q) {
            if(root==p||root==q) return root;
            bool pNode= findNode(root->left,p);
            bool qNode= findNode(root->left,q);
            if(pNode^qNode) return root;
            else if(pNode && qNode) return lowestCommonAncestor(root->left,p,q);
            else return lowestCommonAncestor(root->right,p,q);
    }
    bool findNode(TreeNode *root,TreeNode *cur){
        if(root==NULL) return false;
        if(root==cur) return true;
        return findNode(root->left,cur)||findNode(root->right,cur);
    }
    
};

Answer2:
class Solution {
public:
    TreeNode* lowestCommonAncestor(TreeNode* root, TreeNode* p, TreeNode* q) {
        while((p->val-root->val)*(q->val-root->val)>0){
            root=(p->val<root->val)?root->left:root->right;
        }
        return root;
    }
};
