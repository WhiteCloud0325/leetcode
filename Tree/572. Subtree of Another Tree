Related Topics: Tree
Difficulty: Easy

Question:
Given two non-empty binary trees s and t, check whether tree t has exactly the same structure and node values with a subtree of s. A subtree of s is a tree consists of a node in s and all of this node's descendants. The tree s could also be considered as a subtree of itself.

Example 1:
Given tree s:

     3
    / \
   4   5
  / \
 1   2
Given tree t:
   4 
  / \
 1   2
Return true, because t has the same structure and node values with a subtree of s.
Example 2:
Given tree s:

     3
    / \
   4   5
  / \
 1   2
    /
   0
Given tree t:
   4
  / \
 1   2
Return false.

Answer1:先查找s深度与t深度相同的结点，然后在DFS比较每个结点
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
public:
    vector<TreeNode *> nodes;
    bool isSubtree(TreeNode* s, TreeNode* t) {
        if(!s && !t) return true;
        if(!s || !t) return false; 
        getDepth(s,getDepth(t,-1));
        for(auto i:nodes){
            if(DFS(i,t))
                return true;
        }
        return false;
    }
    int getDepth(TreeNode * node,int d){
        if(!node) return -1;
        int depth=max(getDepth(node->left,d),getDepth(node->right,d))+1;
        // Check if depth equals required value
        // Require depth is -1 for tree t (only return the depth, no push)
        if(depth==d)  nodes.push_back(node);
        return depth;
    }
    bool DFS(TreeNode *s, TreeNode *t){
        if(!s && !t) return true;
        if(!s || !t || s->val!=t->val) return false;
        return DFS(s->left,t->left) && DFS(s->right,t->right);
    }
    
};
