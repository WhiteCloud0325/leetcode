Related Topics:Tree

Question:
You are given a binary tree in which each node contains an integer value.

Find the number of paths that sum to a given value.

The path does not need to start or end at the root or a leaf, but it must go downwards (traveling only from parent nodes to child nodes).

The tree has no more than 1,000 nodes and the values are in the range -1,000,000 to 1,000,000.

Example:

root = [10,5,-3,3,2,null,11,3,-2,null,1], sum = 8

      10
     /  \
    5   -3
   / \    \
  3   2   11
 / \   \
3  -2   1

Return 3. The paths that sum to 8 are:

1.  5 -> 3
2.  5 -> 2 -> 1
3. -3 -> 11

Answer:使用递归来查找sum，并使用广度优先搜索遍历每一个点
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
public:
    int pathSum(TreeNode* root, int sum) {
        int res=0;
        if(root==NULL) return res;
        queue<TreeNode*> myQueue;
        myQueue.push(root);
        while(!myQueue.empty()){
            TreeNode* cur=myQueue.front();
            findPath(cur,sum,res);
            if(cur->left) myQueue.push(cur->left);
            if(cur->right) myQueue.push(cur->right);
            myQueue.pop();
        }
        return res;
    }
    void findPath(TreeNode *cur,int sum,int &num){
        if(cur==NULL) return;
        if(sum==cur->val) num++;
        findPath(cur->left,sum-cur->val,num);
        findPath(cur->right,sum-cur->val,num);
    }
};

Answer2:DFS
class Solution {
public:
    int pathSum(TreeNode* root, int sum) {
        if(!root) return 0;
        return sumUp(root, 0, sum) + pathSum(root->left, sum) + pathSum(root->right, sum);
    }
private:
    int sumUp(TreeNode* root, int pre, int& sum){
        if(!root) return 0;
        int current = pre + root->val;
        return (current == sum) + sumUp(root->left, current, sum) + sumUp(root->right, current, sum);
    }
};
