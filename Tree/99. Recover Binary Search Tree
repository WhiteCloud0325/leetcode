Related Topics: Tree, Depth-first Search
Difficulty: Hard


Question:
Two elements of a binary search tree (BST) are swapped by mistake.

Recover the tree without changing its structure.

Note:
A solution using O(n) space is pretty straight forward. Could you devise a constant space solution?


Answer1: 如果使用O(n)空间非常简单，使用中序遍历得到排序数组，再交换两个错序的数的位置
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
public:
    void recoverTree(TreeNode* root) {
        vector<TreeNode*> nums;
        inOrder(nums,root);
        int pos1=0,pos2=0;
        int i=0,j=nums.size()-1;
        for(int i=0;i<nums.size()-1;i++){
            if(nums[i]->val>nums[i+1]->val){
                pos1=i;
                break;
            }
        }
        for(int i=nums.size()-1;i>0;i--){
            if(nums[i]->val<nums[i-1]->val){
                pos2=i;
                break;
            }
        }
        int temp=nums[pos1]->val;
        nums[pos1]->val=nums[pos2]->val;
        nums[pos2]->val=temp;
    }
    void inOrder(vector<TreeNode*>&nums,TreeNode *root){
        if(!root) return;
        inOrder(nums,root->left);
        nums.push_back(root);
        inOrder(nums,root->right);
    }
};

Answer2:使用深度优先搜索，找到两个错误指针，error1 中序遍历，如果error1->val > root->val(root为当前指针) 则此为错误指针位置
                                       error2 中序遍历反向，如果error2->val <root->val(root为当前指针) 则此为错误指针位置
class Solution {
public:
    TreeNode *error1,*error2;
    void recoverTree(TreeNode* root) {
        error1=NULL,error2=NULL;
        findError1(root);
        findError2(root);
        int temp=error1->val;
        error1->val=error2->val;
        error2->val=temp;
    }
    bool findError1(TreeNode *root){
        if(root==NULL) return false;
        bool isFound=findError1(root->left);
        if(isFound) return true;
        if(error1==NULL){
            error1=root;
            isFound=false;
        }
        else{
            isFound=error1->val>root->val;
        }
        if(isFound) 
            return true;
        else{
            error1=root;
            return findError1(root->right);
        }
    }
    bool findError2(TreeNode *root){
        if(root==NULL) return false;
        bool isFound=findError2(root->right);
        if(isFound) return true;
        if(error2==NULL){
            error2=root;
            isFound=false;
        } 
        else{
            isFound=error2->val<root->val;
        }
        if(isFound) return true;
        else{
            error2=root;  
            return findError2(root->left);
        }
    }
};

Answer3:
class Solution {
public:
    TreeNode *error1,*error2;
    TreeNode *preNode;
    void recoverTree(TreeNode* root) {
        error1=NULL,error2=NULL;
        preNode=new TreeNode(INT_MIN);
        findError(root);
        int temp=error1->val;
        error1->val=error2->val;
        error2->val=temp;
    }
    void findError(TreeNode *root){
        if(root ==NULL) return;
        findError(root->left);
        if(error1 ==NULL && preNode->val >=root->val)
            error1=preNode;
        if(error1 !=NULL && preNode->val >=root->val)
            error2=root;
        preNode=root;
        findError(root->right);
    }
};
