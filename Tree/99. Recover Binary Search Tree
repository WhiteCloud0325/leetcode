Related Topics: Tree, Depth-first Search
Difficulty: Hard


Question:
Two elements of a binary search tree (BST) are swapped by mistake.

Recover the tree without changing its structure.

Note:
A solution using O(n) space is pretty straight forward. Could you devise a constant space solution?


Answer1: 如果使用O(n)空间非常简单，使用中序遍历得到排序数组，再交换两个错序的数的位置
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
public:
    void recoverTree(TreeNode* root) {
        vector<TreeNode*> nums;
        inOrder(nums,root);
        int pos1=0,pos2=0;
        int i=0,j=nums.size()-1;
        for(int i=0;i<nums.size()-1;i++){
            if(nums[i]->val>nums[i+1]->val){
                pos1=i;
                break;
            }
        }
        for(int i=nums.size()-1;i>0;i--){
            if(nums[i]->val<nums[i-1]->val){
                pos2=i;
                break;
            }
        }
        int temp=nums[pos1]->val;
        nums[pos1]->val=nums[pos2]->val;
        nums[pos2]->val=temp;
    }
    void inOrder(vector<TreeNode*>&nums,TreeNode *root){
        if(!root) return;
        inOrder(nums,root->left);
        nums.push_back(root);
        inOrder(nums,root->right);
    }
};
