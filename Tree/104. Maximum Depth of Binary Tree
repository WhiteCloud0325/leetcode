Related Topics: Tree, Depth-first Search

Question:
Given a binary tree, find its maximum depth.

The maximum depth is the number of nodes along the longest path from the root node down to the farthest leaf node.



Answer1:BFS
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
public:
    int maxDepth(TreeNode* root) {
        queue<TreeNode*> myQueue;
        int res=0;
        int curNum=0,lastNum=0;
        if(root==NULL) return res;
        myQueue.push(root);
        lastNum=1;
        while(lastNum>0){
            for(int i=0;i<lastNum;i++){
                TreeNode *pNode=myQueue.front();
                myQueue.pop();
                if(pNode->left){
                    curNum++;
                    myQueue.push(pNode->left);
                }
                if(pNode->right){
                    curNum++;
                    myQueue.push(pNode->right);
                }
            }
            res++;
            lastNum=curNum;
            curNum=0;
        }
        return res;
    }
};

Answer2:DFS
class Solution {
public:
    int maxDepth(TreeNode* root) {
        if(root==NULL) return 0;
        return 1+max(maxDepth(root->left),maxDepth(root->right));
    }
};
