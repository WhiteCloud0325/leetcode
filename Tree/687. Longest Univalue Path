Related Topics: Tree, Recursion
Difficulty: Easy

Question:
Given a binary tree, find the length of the longest path where each node in the path has the same value. This path may or may not pass through the root.

Note: The length of path between two nodes is represented by the number of edges between them.

Example 1:

Input:

              5
             / \
            4   5
           / \   \
          1   1   5
Output:

2
Example 2:

Input:

              1
             / \
            4   5
           / \   \
          4   4   5
Output:

2
Note: The given binary tree has not more than 10000 nodes. The height of the tree is not more than 1000.

Answer1:
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
public:
    int longestUnivaluePath(TreeNode* root) {
        int res=0;
        DFS(root,res);
        return res;
    }
    int DFS(TreeNode *root,int &res){
        if(root==NULL) return 0;
        int leftPath=0,rightPath=0;
        if(root->left&&root->left->val==root->val) leftPath=1+DFS(root->left,res);
        else DFS(root->left,res);
        if(root->right&&root->right->val==root->val) rightPath=1+DFS(root->right,res);
        else DFS(root->right,res);
        res=max(leftPath+rightPath,res);
        return max(leftPath,rightPath);
        
    }
};
Answer2:DFS==Answer1但这种写法很简便
Perform DFS by recursively invoking helper for left and right subtrees. When coming back up the recursive stack, check to see if the root value is equal to the left and right subtree root value, if so, add one onto the max path value returned by the subtree to include the one additional path between the root and the subtree root.

There are 3 possible use cases to consider when coming back up the recursive stack:

Case 1: If the root value is equal to BOTH the left and right subtree root values, then set m to the maximum of itself compared to the “up-side-down-V shaped” path created by including the left and right subtrees max paths with the root ( l=l+1 and r=r+1 ). Return the max path value of the left and right subtrees return max(l,r) which is needed in case the next parent up the recursive stack is also the same value.

Case 2: If the root value is NOT equal to EITHER the left INCLUSIVE-OR right subtree values, then set BOTH l=0 and r=0 and return 0 ( i.e. return max(0,0) ).

Case 3: If the root value is equal to the left subtree root value XOR the right subtree root value, then either l=0 and r=r+1 XOR l=l+1 and r=0, return the maximum of the left and right subtree path values ( i.e. return max(l,0) XOR return max(0,r) ).

Always check for a new max for each of these 3 use cases by adding the path value of the left subtree and right subtree. m=max(m,l+r). It is OK to add l and r together when checking for a new max for each of the 3 use cases above, since l and/or r are set to 0 when applicable ( i.e. for case 2: 0+0==0 and for case 3: l+0==l XOR 0+r==r ).


class Solution {
public:
    int longestUnivaluePath(TreeNode* root) {
        int res=0;
        DFS(root,res);
        return res;
    }
    int DFS(TreeNode *root,int &res){
        if(root==NULL) return 0;
        int l= root->left? DFS(root->left,res):0;
        int r= root->right? DFS(root->right,res):0;
        l=(root->left && root->left->val==root->val)?l+1:0;
        r=(root->right && root->right->val== root->val)?r+1:0;
        res=max(l+r,res);
        return max(l,r);
        
    }
};
