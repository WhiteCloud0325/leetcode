Related Topics:Tree, Design
Difficulty: Hard
Question:
Serialization is the process of converting a data structure or object into a sequence of bits so that it can be stored in a file or memory buffer, or transmitted across a network connection link to be reconstructed later in the same or another computer environment.

Design an algorithm to serialize and deserialize a binary tree. There is no restriction on how your serialization/deserialization algorithm should work. You just need to ensure that a binary tree can be serialized to a string and this string can be deserialized to the original tree structure.

For example, you may serialize the following tree

    1
   / \
  2   3
     / \
    4   5
as "[1,2,3,null,null,4,5]", just the same as how LeetCode OJ serializes a binary tree. You do not necessarily need to follow this format, so please be creative and come up with different approaches yourself.
Note: Do not use class member/global/static variables to store states. Your serialize and deserialize algorithms should be stateless.



Answer1:结果对，但超时了
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Codec {
public:

    // Encodes a tree to a single string.
    string serialize(TreeNode* root) {
        string res="[";
        if(root){
            queue<TreeNode *> qt;
            qt.push(root);
            int num1=0,num2=1;   //num2记录这一层有多少不为NULL的结点
            while(num2){
                num1=qt.size();
                int curNum=0; //curNum 记录下一层有多少不为NUL的结点
                for(int i=0;i<num1;i++){
                    TreeNode *pNode=qt.front();
                    qt.pop();
                    if(num2==0&&curNum==0) break;
                    if(pNode){
                        num2--;
                        res+=to_string(pNode->val)+",";
                        qt.push(pNode->left);
                        qt.push(pNode->right);
                        if(pNode->left) curNum++;
                        if(pNode->right) curNum++;
                    }
                    else{
                        res+="null,";
                        qt.push(NULL);
                        qt.push(NULL);
                    }
                }
                num2=curNum;
            }
            res.pop_back(); //erase ","
        }
        res+="]";
        return res;
    }

    // Decodes your encoded data to tree.
    TreeNode* deserialize(string data) {
        int pos=1;
        if(data[pos]==']') return NULL;
        size_t found=data.find(',',pos);
        if(found==data.npos) return new TreeNode(stoi(data.substr(pos,data.length()-1-pos)));
        string s=data.substr(pos,found-pos);
        pos=found+1;
        TreeNode *root=new TreeNode(stoi(s));
        queue<TreeNode*> qt;
        qt.push(root);
        int num1=1;
        while(pos<data.length()){
            int num1=qt.size();
            for(int i=0;i<num1;i++){
                TreeNode *temp=qt.front();
                qt.pop();
                found=data.find(',',pos);
                if(found==data.npos){
                    temp->left=new TreeNode(stoi(data.substr(pos,data.length()-1-pos)));
                    pos=data.length();
                    break;
                }
                s=data.substr(pos,found-pos);
                pos=found+1;
                if(s=="null") qt.push(NULL);
                else {
                    temp->left=new TreeNode(stoi(s));
                    qt.push(temp->left);
                }
                found=data.find(',',pos);
                if(found==data.npos){
                    temp->right=new TreeNode(stoi(data.substr(pos,data.length()-1-pos)));
                    pos=data.length();
                    break;
                }
                s=data.substr(pos,found-pos);
                pos=found+1;
                if(s=="null") qt.push(NULL);
                else{
                    temp->right=new TreeNode(stoi(s));
                    qt.push(temp->right);
                }
                
            }
        }
        return root;
        
    }
    
};
