Related Topics: Tree
Difficulty: Easy
Question:
Given a Binary Search Tree (BST), convert it to a Greater Tree such that every key of the original BST is changed to the original key plus sum of all keys greater than the original key in BST.

Example:

Input: The root of a Binary Search Tree like this:
              5
            /   \
           2     13

Output: The root of a Greater Tree like this:
             18
            /   \
          20     13

Answer1:
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
public:
    TreeNode* convertBST(TreeNode* root) {
        stack<TreeNode *> st;
        TreeNode *cur=root;
        int sum=0;
        while(!st.empty()||cur){
            if(cur){
                st.push(cur);
                cur=cur->right;
            }
            else{
                cur=st.top();
                st.pop();
                cur->val+=sum;
                sum=cur->val;
                cur=cur->left;
            }
        }
        return root;
    }
   
};

Answer2:
class Solution {
public:
    TreeNode* convertBST(TreeNode* root) {
        int sum=0;
        DFS(root,sum);
        return root;
    }
    void DFS(TreeNode *root,int &sum){
        if(root==NULL) return;
        DFS(root->right,sum);
        root->val+=sum;
        sum=root->val;
        DFS(root->left,sum);
    }
};
