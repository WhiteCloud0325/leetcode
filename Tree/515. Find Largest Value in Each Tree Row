Related Topics: Tree, Depth-first Search, Breadth-frist Search
Difficulty: Medium

Question:
You need to find the largest value in each row of a binary tree.

Example:
Input: 

          1
         / \
        3   2
       / \   \  
      5   3   9 

Output: [1, 3, 9]


Answer1:BFS
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
public:
    vector<int> largestValues(TreeNode* root) {
        vector<int> res;
        if(root==NULL) return res;
        queue<TreeNode*> qt;
        qt.push(root);
        int num,maxNum=INT_MIN;
        while(!qt.empty()){
            maxNum=INT_MIN;
            num=qt.size();
            for(int i=0;i<num;i++){
                TreeNode *node=qt.front();
                qt.pop();
                if(node->left) qt.push(node->left);
                if(node->right) qt.push(node->right);
                maxNum=max(maxNum,node->val);
            }
            res.push_back(maxNum);
        }
        return  res;
    }
};

Answer2:
class Solution {
public:
    vector<int> largestValues(TreeNode* root) {
        vector<int> res;
        DFS(root,res,0);
        return res;
    }
    void DFS(TreeNode *root,vector<int> &res,int depth){
        if(root==NULL) return;
        if(depth==res.size()) res.push_back(root->val);
        else    res[depth]=max(res[depth],root->val);
        DFS(root->left,res,depth+1);
        DFS(root->right,res,depth+1);
    }
};
