Implement the following operations of a stack using queues.

push(x) -- Push element x onto stack.
pop() -- Removes the element on top of the stack.
top() -- Get the top element.
empty() -- Return whether the stack is empty.
Notes:
You must use only standard operations of a queue -- which means only push to back, peek/pop from front, size, and is empty operations are valid.
Depending on your language, queue may not be supported natively. You may simulate a queue by using a list or deque (double-ended queue), as long as you use only standard operations of a queue.
You may assume that all operations are valid (for example, no pop or top operations will be called on an empty stack).

class MyStack {
public:
    /** Initialize your data structure here. */
    MyStack() {
        size_=0;
        toppos_=0;
    }
    
    /** Push element x onto stack. */
    void push(int x) {
        if(toppos_!=size_){
            myqueue_.push(myqueue_.front());
            myqueue_.pop();
            toppos_=size_;
        }
        myqueue_.push(x);
        size_++;
        toppos_++;
    }
    
    /** Removes the element on top of the stack and returns that element. */
    int pop() {
        int temp=top();
        myqueue_.pop();
        size_--;
        toppos_=size_;
        return temp;
    }
    
    /** Get the top element. */
    int top() {
        while(toppos_!=1){
            myqueue_.push(myqueue_.front());
            myqueue_.pop();
            toppos_--;
        }
        return myqueue_.front();
    }
    
    /** Returns whether the stack is empty. */
    bool empty() {
        return myqueue_.empty();
    }
private:
    queue<int> myqueue_;
    int size_;
    int toppos_;
};

/**
 * Your MyStack object will be instantiated and called as such:
 * MyStack obj = new MyStack();
 * obj.push(x);
 * int param_2 = obj.pop();
 * int param_3 = obj.top();
 * bool param_4 = obj.empty();
 */
 
 
 
 
 
 
 
 
 
 
 
 
 class MyStack {
public:
    /** Initialize your data structure here. */
    MyStack() {
    }
    
    /** Push element x onto stack. */
    void push(int x) {
        myqueue_.push(x);
        for(int i=1;i<myqueue_.size();i++){
            myqueue_.push(myqueue_.front());
            myqueue_.pop();
        }
    }
    
    /** Removes the element on top of the stack and returns that element. */
    int pop() {
        int temp=myqueue_.front();
        myqueue_.pop();
        return temp;
    }
    
    /** Get the top element. */
    int top() {
       return myqueue_.front();
    }
    
    /** Returns whether the stack is empty. */
    bool empty() {
        return myqueue_.empty();
    }
private:
    queue<int> myqueue_;
};

/**
 * Your MyStack object will be instantiated and called as such:
 * MyStack obj = new MyStack();
 * obj.push(x);
 * int param_2 = obj.pop();
 * int param_3 = obj.top();
 * bool param_4 = obj.empty();
 */
